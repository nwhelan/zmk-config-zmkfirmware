#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

#define ___ &trans
#define XXX &none

#define AS(keycode) &as LS(keycode) keycode// Autoshift Macro
#define MEH LS(LC(LALT))

&lt {
	// require-prior-idle-ms = <100>;
	tapping-term-ms = <150>;
	quick-tap-ms = <200>;
};

&mt {
	quick-tap-ms = <200>;
};

&sk {
	release-after-ms = <900>;
	quick-release;
};

&sl {
	ignore-modifiers;
};


/ {
	behaviors {
		as: auto_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <250>;
			require-prior-idle-ms = <100>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		ht: hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
		};
		sabk: shift_to_alt_backspace {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp BSPC>, <&kp LA(BSPC)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		smart_shift: smart_shift {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&sk LSHFT>, <&caps_word>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		sym_bspc: left_thumb_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;
			quick-tap-ms = <200>;
			bindings = <&mo>, <&sabk>;
		};
		lhm: left_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
		};
		rhm: right_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
		};
	};
	
	#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
	combo_##NAME { \
		timeout-ms = <TERM>; \
		bindings = <BINDINGS>; \
		key-positions = <KEYPOS>; \
		layers = <LAYERS>; \
		require-prior-idle-ms = <QUICKTAP>; \
		__VA_ARGS__ \
	};
	
	combos {
		compatible = "zmk,combos";
		COMBO(esc, &kp ESC, 0 1, , 80, 50)
		COMBO(tab, &kp TAB, 10 11, , 80, 50)
		COMBO(open_bracket, &as LS(LBKT) LBKT, 2 12, , 80, 50)
		COMBO(open_paren, &kp LPAR, 3 13, , 80, 50)
		COMBO(close_paren, &kp RPAR, 6 16, , 80, 50)
		COMBO(close_bracket, &as LS(RBKT) RBKT, 7 17, , 80, 50)
		COMBO(pg_up, &kp PG_UP, 5 6, , 80, 50)
		COMBO(pg_dn, &kp PG_DN, 15 16, , 80, 50)
		COMBO(home, &kp HOME, 4 3, , 80, 50)
		COMBO(end, &kp END, 14 13, , 80, 50)
	};
	
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <1 2>;
			then-layer = <3>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";
		
		base {
			bindings = <
			&kp Q           &kp W           &kp E           &kp R           &kp T                                           &kp Y           &kp U           &kp I           &kp O           &kp P
			&lhm LGUI A     &lhm LALT S    &lhm LCTRL D     &lhm LSHFT F     &kp G                                           &kp H           &rhm LSHIFT J     &rhm LCTRL K     &rhm LALT L    &rhm LGUI APOS
			&kp Z           &kp X           &kp C           &kp V           &kp B                                           &kp N           &kp M           AS(COMMA)       AS(DOT)         AS(FSLH)
			&kp SPACE   &smart_shift    &sym_bspc 2 0    &lt NAV SPACE
			>;
		};
		
		nav {
			bindings = <
			___          ___          ___          ___          ___                                          &kp PAGE_UP     &kp LC(PG_UP)   &kp UP          &kp LC(PG_DN)   &kp DELETE
			&kp LGUI        &kp LALT      &kp LCTRL        &kp LSHIFT    ___                                          &kp PAGE_DOWN   &kp LEFT        &kp DOWN        &kp RIGHT       &kp BSLH
			___          ___          ___          ___          ___                                          ___          &kp HOME        &kp END         &kp LC(SPACE)   &kp LC(SPACE)
			___         &kp LSHFT       &mo SYM  ___
			>;
		};
		
		sym {
			bindings = <
			AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)                                          AS(N6)          AS(N7)          AS(N8)          AS(N9)          AS(N0)
			AS(GRAVE)       &sk LCTRL       &sk LALT        &sk LGUI        &sk LC(LALT)                                    AS(BSLH)        AS(MINUS)       AS(EQUAL)       AS(LBKT)        AS(RBKT)
			___          ___          ___          ___          ___                                          ___          ___          ___          ___          &kp ENTER
			___          ___          &kp LSHFT       &mo NAV
			>;
		};
		
		adj {
			bindings = <
			&bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_CLR_ALL                                  &kp C_SLEEP     ___          ___          &kp C_BRI_DN    &kp C_BRI_UP
			&studio_unlock  ___          ___          ___          ___                                          ___          ___          ___          &kp C_VOL_DN    &kp C_VOL_UP
			&bootloader     ___          ___          ___          ___                                          ___          ___          ___          ___          &bootloader
			___          ___          ___          ___
			>;
		};
	};
};
